
from .models import Message
from aiogram import F, Router, types
from sqlalchemy.ext.asyncio import AsyncSession
from const import markups
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
router = Router(name="support")

class FeedbackState(StatesGroup):
    wait = State()


async def save_message(message: types.Message, session: AsyncSession) -> None:
    user_id = message.from_user.id
    username = message.from_user.username
    text = message.text
    message = Message(user_id=user_id, username=username, text=text)
    session.add(message)
    await session.commit()




@router.message(F.text == markups['feedback'])
async def feedback_handler(msg: types.Message, session: AsyncSession, state: FSMContext):
    await state.set_state(FeedbackState.wait)
    await msg.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ damfai, –∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–º, –µ—Å–ª–∏ –Ω–∞—à–µ–ª –∫–∞–∫–æ–π-–ª–∏–±–æ –±–∞–≥ üôè')
    
@router.message(FeedbackState.wait)    
async def feedback_messages(msg: types.Message, session: AsyncSession, state: FSMContext):
        await save_message(msg, session)
        await msg.answer('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
        await state.clear()